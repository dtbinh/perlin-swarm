var _user$project$Main$view = function (model) {
	return _evancz$elm_graphics$Element$toHtml(
		A4(
			_evancz$elm_graphics$Element$container,
			model.width,
			model.height,
			_evancz$elm_graphics$Element$middle,
			A3(
				_evancz$elm_graphics$Collage$collage,
				model.width,
				model.height,
				A2(_elm_lang$core$List$concatMap, _user$project$Bird$view, model.birds))));
};
var _user$project$Main$generateEther = A2(
	_user$project$Perlin$octaves,
	5,
	_mgold$elm_random_pcg$Random_Pcg$initialSeed(227852860));
var _user$project$Main$initModel = {
	birds: {ctor: '[]'},
	width: 1000,
	height: 800,
	mousePosition: A2(_elm_lang$mouse$Mouse$Position, 0, 0),
	ether: _user$project$Main$generateEther,
	time: 0
};
var _user$project$Main$Model = F6(
	function (a, b, c, d, e, f) {
		return {birds: a, width: b, height: c, mousePosition: d, ether: e, time: f};
	});
var _user$project$Main$TickTime = function (a) {
	return {ctor: 'TickTime', _0: a};
};
var _user$project$Main$MouseMove = function (a) {
	return {ctor: 'MouseMove', _0: a};
};
var _user$project$Main$NewBirdCoordinates = function (a) {
	return {ctor: 'NewBirdCoordinates', _0: a};
};
var _user$project$Main$generateBirds = function (model) {
	return A2(
		_elm_lang$core$Random$generate,
		_user$project$Main$NewBirdCoordinates,
		A2(
			_elm_lang$core$Random$pair,
			A2(_elm_lang$core$Random$int, 0 - model.width, model.width),
			A2(_elm_lang$core$Random$int, 0 - model.height, model.height)));
};
var _user$project$Main$init = {
	ctor: '_Tuple2',
	_0: _user$project$Main$initModel,
	_1: _user$project$Main$generateBirds(_user$project$Main$initModel)
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'Tick':
				var newBirds = A2(
					_elm_lang$core$List$map,
					A5(_user$project$Bird$update, _p0._0, model.width, model.height, model.ether, model.birds),
					model.birds);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{birds: newBirds}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'TickTime':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{time: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'NewBirdCoordinates':
				var newBird = A3(
					_user$project$Bird$init,
					_elm_lang$core$Basics$toFloat(_p0._0._0),
					_elm_lang$core$Basics$toFloat(_p0._0._1),
					_elm_lang$core$Native_Utils.cmp(
						_elm_lang$core$List$length(model.birds),
						99) > -1);
				var newCmd = (_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$List$length(model.birds),
					100) < 0) ? _user$project$Main$generateBirds(model) : _elm_lang$core$Platform_Cmd$none;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							birds: {ctor: '::', _0: newBird, _1: model.birds}
						}),
					_1: newCmd
				};
			default:
				var _p1 = _p0._0;
				var newPosition = A2(
					_elm_lang$mouse$Mouse$Position,
					_p1.x - _elm_lang$core$Basics$round(
						_elm_lang$core$Basics$toFloat(model.width) / 2),
					-1 * (_p1.y - _elm_lang$core$Basics$round(
						_elm_lang$core$Basics$toFloat(model.height) / 2)));
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{mousePosition: newPosition}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Main$Tick = function (a) {
	return {ctor: 'Tick', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _elm_lang$animation_frame$AnimationFrame$diffs(_user$project$Main$Tick),
			_1: {
				ctor: '::',
				_0: _elm_lang$mouse$Mouse$moves(_user$project$Main$MouseMove),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
